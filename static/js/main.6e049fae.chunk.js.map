{"version":3,"sources":["components/filter/FIlter.module.css","redux/phonebook/phonebookActions.js","components/contactForm/ContactForm.js","components/contactList/ContactList.js","components/filter/Filter.js","App.js","redux/phonebook/phonebookReducer.js","redux/store.js","index.js","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css"],"names":["module","exports","addContact","createAction","deleteContact","setFilter","actions","ContactForm","state","name","number","onHandleChange","e","target","value","setState","onHandleSubmit","preventDefault","props","contacts","find","contact","toLowerCase","alert","id","uuidv4","className","styles","form","onSubmit","this","formName","formInput","type","pattern","title","onChange","required","formButton","Component","connect","items","dispatch","newContact","filter","item","includes","contactList","length","map","contactListItem","contactListItemSpan","listItemButton","onClick","filterName","filterInput","App","itemsReducer","createReducer","payload","filterReducer","_","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","key","storage","rootReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.6e049fae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterName\":\"FIlter_filterName__2Tx2-\",\"filterInput\":\"FIlter_filterInput__3_rAi\"};","// Создай действия (actions) сохранения и удаления контакта, а также обновления фильтра.\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"phonebook/addContact\");\r\nexport const deleteContact = createAction(\"phonebook/deleteContact\");\r\nexport const setFilter = createAction(\"phonebook/setFilter\");\r\n\r\nconst actions = { addContact, deleteContact, setFilter };\r\nexport default actions;\r\n\r\n// ==================================================================\r\n// REDUX\r\n// export const ADD_CONTACT = \"phonebook/addContact\";\r\n// export const DELETE_CONTACT = \"phonebook/deleteContact\";\r\n// export const SET_FILTER = \"phonebook/setFilter\";\r\n\r\n// const addContact = (newContact) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: newContact,\r\n// });\r\n// const deleteContact = (id) => ({ type: DELETE_CONTACT, payload: id });\r\n\r\n// const setFilter = (value) => ({ type: SET_FILTER, payload: value });\r\n// export { addContact, deleteContact, setFilter };\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n} from \"../../redux/phonebook/phonebookActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n\r\n  onHandleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log(`this.props.contacts`, this.props.contacts);\r\n    const addingContact = this.props.contacts.find(\r\n      (contact) => contact.name.toLowerCase() === this.state.name.toLowerCase()\r\n    );\r\n    if (addingContact) {\r\n      alert(`${this.state.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state, id: uuidv4() });\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n        <label className={styles.formName}>\r\n          Name:\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={this.state.name}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.formName}>\r\n          Phone№:\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            value={this.state.number}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.formButton}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: state.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addContact: (newContact) => dispatch(addContact(newContact)),\r\n    deleteContact: (id) => dispatch(deleteContact(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// ====================================================================\r\n// class ContactForm extends Component {\r\n//   state = { name: \"\", number: \"\" };\r\n\r\n//   onHandleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   onHandleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.addContact({ ...this.state, id: uuidv4() });\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n//         <label className={styles.formName}>\r\n//           Name:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             value={this.state.name}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label className={styles.formName}>\r\n//           Phone№:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             value={this.state.number}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" className={styles.formButton}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../../redux/phonebook/phonebookActions\";\r\n\r\nconst ContactList = ({ items, deleteContact }) => {\r\n  // console.log(`contacts list`, items);\r\n  return (\r\n    <>\r\n      <ul className={styles.contactList}>\r\n        {items.length > 0 &&\r\n          items.map((item) => (\r\n            <li className={styles.contactListItem} key={item.id}>\r\n              <span className={styles.contactListItemSpan}>{item.name}</span>:\r\n              <span className={styles.contactListItemSpan}>{item.number}</span>\r\n              <button\r\n                type=\"button\"\r\n                className={styles.listItemButton}\r\n                onClick={() => deleteContact(item.id)}\r\n              >\r\n                Detete\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  // return { items: state.items };\r\n  return {\r\n    items: state.items.filter((item) =>\r\n      item.name.toLowerCase().includes(state.filter.toLowerCase())\r\n    ),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { deleteContact: deleteContact })(\r\n  ContactList\r\n);\r\n\r\n// ==========================================================\r\n// import React from \"react\";\r\n// import ContactListItem from \"../contactListItem/ContactListItem\";\r\n// import styles from \"./ContactList.module.css\";\r\n\r\n// const ContactList = ({ contacts, removeContact }) => {\r\n//   return (\r\n//     <>\r\n//       <ul className={styles.contactList}>\r\n//         {contacts.map(({ id, name, number }) => (\r\n//           <ContactListItem\r\n//             name={name}\r\n//             id={id}\r\n//             key={id}\r\n//             number={number}\r\n//             removeContact={removeContact}\r\n//           />\r\n//         ))}\r\n//       </ul>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ContactList;\r\n\r\n// ====================================================\r\n\r\n// import React from \"react\";\r\n// import styles from \"./ContactListItem.module.css\";\r\n\r\n// const ContactListItem = ({ name, number, id, removeContact }) => {\r\n//   const remove = () => {\r\n//     removeContact(id);\r\n//   };\r\n//   return (\r\n//     <li className={styles.contactListItem}>\r\n//       <span className={styles.contactListItemSpan}>{name}</span>:\r\n//       <span className={styles.contactListItemSpan}>{number}</span>\r\n//       <button type=\"button\" className={styles.listItemButton} onClick={remove}>\r\n//         Detete\r\n//       </button>\r\n//     </li>\r\n//   );\r\n// };\r\n\r\n// export default ContactListItem;\r\n","import React from \"react\";\r\nimport styles from \"./FIlter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/phonebook/phonebookActions\";\r\n\r\nconst Filter = ({ value, setFilter }) => {\r\n  return (\r\n    <>\r\n      <label className={styles.filterName}>\r\n        Find contacts by name\r\n        <input\r\n          className={styles.filterInput}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(null, { setFilter: setFilter })(Filter);\r\n","import React from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  return (\n    <>\n      <h1 className=\"appHeading\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"appHeading\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n\n// ===============================================\n// <>\n// <h1 className=\"appHeading\">Phonebook</h1>\n// <ContactForm addContact={this.addContact} />\n// <h2 className=\"appHeading\">Contacts</h2>\n// <Filter value={this.state.filter} onFilter={this.onFilter} />\n// <ContactList\n//   contacts={this.filteredContacts()}\n//   addContact={this.addContact}\n//   removeContact={this.removeContact}\n// />\n// </>\n","// Создай редюсеры контактов и фильтра.\r\n\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport actions from \"./phonebookActions\";\r\n\r\n// console.log(actions.addContact.type);\r\n// console.log(actions.deleteContact.type);\r\n// console.log(actions.setFilter.type);\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter((item) => item.id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n\r\n// ============================================================================\r\n// REDUX\r\n// import { combineReducers } from \"redux\";\r\n// import { ADD_CONTACT, DELETE_CONTACT, SET_FILTER } from \"./phonebookActions\";\r\n\r\n// // state={items:[{name:'', number:''},{name:'', number:''}], filter:''}\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   // console.log(payload);\r\n//   // console.log(state);\r\n//   switch (type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, payload];\r\n\r\n//     case DELETE_CONTACT:\r\n//       return state.filter((item) => item.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case SET_FILTER:\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// // const rootReducer = combineReducers({\r\n// //   contacts: contactsReducer,\r\n// // });\r\n\r\n// export default contactsReducer;\r\n","// Создай хранилище и добавь инструменты разработчика\r\n// =============================================\r\n\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./phonebook/phonebookReducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\nconst rootReducer = contactsReducer;\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// =============================================\r\n// const rootReducer = combineReducers({\r\n//   phonebook: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n\r\n// const store = configureStore({\r\n//   reducer: rootReducer,\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === \"development\",\r\n// });\r\n\r\n// const persistor = persistStore(store);\r\n// ================================================\r\n// REDUX\r\n// import { createStore } from \"redux\";\r\n// // import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import contactsReducer from \"./phonebook/phonebookReducer\";\r\n\r\n// const store = createStore(contactsReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","// Свяжи React-компоненты с Redux-логикой при помощи бибилиотеки react-redux.\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"modern-normalize/modern-normalize.css\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<h2>...isloading</h2>} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1JpcQ\",\"formName\":\"ContactForm_formName__4UJPx\",\"formInput\":\"ContactForm_formInput__1rKvO\",\"formButton\":\"ContactForm_formButton__2U46Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2qokW\",\"contactListItem\":\"ContactList_contactListItem__3XOhT\",\"contactListItemSpan\":\"ContactList_contactListItemSpan__3g33L\",\"listItemButton\":\"ContactList_listItemButton__3DYGo\"};"],"sourceRoot":""}